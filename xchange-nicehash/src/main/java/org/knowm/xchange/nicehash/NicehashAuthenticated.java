package org.knowm.xchange.nicehash;

import org.knowm.xchange.nicehash.dto.account.*;
import org.knowm.xchange.nicehash.dto.trade.*;
import org.knowm.xchange.nicehash.dto.NicehashException;
import si.mazi.rescu.ParamsDigest;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

@Path("")
@Produces(MediaType.APPLICATION_JSON)
public interface NicehashAuthenticated extends Nicehash {

  public static final String SIGNATURE = "signature";
  static final String X_MBX_APIKEY = "X-MBX-APIKEY";

  @POST
  @Path("api/v3/order")
  /**
   * Send in a new order
   *
   * @param symbol
   * @param side
   * @param type
   * @param timeInForce
   * @param quantity
   * @param price optional, must be provided for limit orders only
   * @param newClientOrderId optional, a unique id for the order. Automatically generated if not
   *     sent.
   * @param stopPrice optional, used with stop orders
   * @param icebergQty optional, used with iceberg orders
   * @param recvWindow optional
   * @param timestamp
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  NicehashNewOrder newOrder(
          @FormParam("symbol") String symbol,
          @FormParam("side") OrderSide side,
          @FormParam("type") OrderType type,
          @FormParam("timeInForce") TimeInForce timeInForce,
          @FormParam("quantity") BigDecimal quantity,
          @FormParam("price") BigDecimal price,
          @FormParam("newClientOrderId") String newClientOrderId,
          @FormParam("stopPrice") BigDecimal stopPrice,
          @FormParam("icebergQty") BigDecimal icebergQty,
          @FormParam("recvWindow") Long recvWindow,
          @FormParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @POST
  @Path("api/v3/order/test")
  /**
   * Test new order creation and signature/recvWindow long. Creates and validates a new order but
   * does not send it into the matching engine.
   *
   * @param symbol
   * @param side
   * @param type
   * @param timeInForce
   * @param quantity
   * @param price
   * @param newClientOrderId optional, a unique id for the order. Automatically generated by
   *     default.
   * @param stopPrice optional, used with STOP orders
   * @param icebergQty optional used with icebergOrders
   * @param recvWindow optional
   * @param timestamp
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  Object testNewOrder(
          @FormParam("symbol") String symbol,
          @FormParam("side") OrderSide side,
          @FormParam("type") OrderType type,
          @FormParam("timeInForce") TimeInForce timeInForce,
          @FormParam("quantity") BigDecimal quantity,
          @FormParam("price") BigDecimal price,
          @FormParam("newClientOrderId") String newClientOrderId,
          @FormParam("stopPrice") BigDecimal stopPrice,
          @FormParam("icebergQty") BigDecimal icebergQty,
          @FormParam("recvWindow") Long recvWindow,
          @FormParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @GET
  @Path("api/v3/order")
  /**
   * Check an order's status.<br>
   * Either orderId or origClientOrderId must be sent.
   *
   * @param symbol
   * @param orderId optional
   * @param origClientOrderId optional
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  NicehashOrder orderStatus(
          @QueryParam("symbol") String symbol,
          @QueryParam("orderId") long orderId,
          @QueryParam("origClientOrderId") String origClientOrderId,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @DELETE
  @Path("api/v3/order")
  /**
   * Cancel an active order.
   *
   * @param symbol
   * @param orderId optional
   * @param origClientOrderId optional
   * @param newClientOrderId optional, used to uniquely identify this cancel. Automatically
   *     generated by default.
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  NicehashCancelledOrder cancelOrder(
          @QueryParam("symbol") String symbol,
          @QueryParam("orderId") long orderId,
          @QueryParam("origClientOrderId") String origClientOrderId,
          @QueryParam("newClientOrderId") String newClientOrderId,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @GET
  @Path("api/v3/openOrders")
  /**
   * Get all open orders on a symbol.
   *
   * @param symbol optional
   * @param recvWindow optional
   * @param timestamp
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  List<NicehashOrder> openOrders(
          @QueryParam("symbol") String symbol,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @GET
  @Path("api/v3/openOrders")
  /**
   * Get all open orders without a symbol.
   *
   * @param symbol
   * @param recvWindow optional
   * @param timestamp mandatory
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  List<NicehashOrder> openOrders(
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @GET
  @Path("api/v3/allOrders")
  /**
   * Get all account orders; active, canceled, or filled. <br>
   * If orderId is set, it will get orders >= that orderId. Otherwise most recent orders are
   * returned.
   *
   * @param symbol
   * @param orderId optional
   * @param limit optional
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  List<NicehashOrder> allOrders(
          @QueryParam("symbol") String symbol,
          @QueryParam("orderId") Long orderId,
          @QueryParam("limit") Integer limit,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @GET
  @Path("api/v3/account")
  /**
   * Get current account information.
   *
   * @param recvWindow optional
   * @param timestamp
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  NicehashAccountInformation account(
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @GET
  @Path("api/v3/myTrades")
  /**
   * Get trades for a specific account and symbol.
   *
   * @param symbol
   * @param limit optional, default 500; max 500.
   * @param fromId optional, tradeId to fetch from. Default gets most recent trades.
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  List<NicehashTrade> myTrades(
          @QueryParam("symbol") String symbol,
          @QueryParam("limit") Integer limit,
          @QueryParam("fromId") Long fromId,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @POST
  @Path("wapi/v3/withdraw.html")
  /**
   * Submit a withdraw request.
   *
   * @param asset
   * @param address
   * @param addressTag optional for Ripple
   * @param amount
   * @param name optional, description of the address
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  WithdrawRequest withdraw(
          @FormParam("asset") String asset,
          @FormParam("address") String address,
          @FormParam("addressTag") String addressTag,
          @FormParam("amount") BigDecimal amount,
          @FormParam("name") String name,
          @FormParam("recvWindow") Long recvWindow,
          @FormParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @GET
  @Path("wapi/v3/depositHistory.html")
  /**
   * Fetch deposit history.
   *
   * @param asset optional
   * @param startTime optional
   * @param endTime optional
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  DepositList depositHistory(
          @QueryParam("asset") String asset,
          @QueryParam("startTime") Long startTime,
          @QueryParam("endTime") Long endTime,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @GET
  @Path("wapi/v3/withdrawHistory.html")
  /**
   * Fetch withdraw history.
   *
   * @param asset optional
   * @param startTime optional
   * @param endTime optional
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  WithdrawList withdrawHistory(
          @QueryParam("asset") String asset,
          @QueryParam("startTime") Long startTime,
          @QueryParam("endTime") Long endTime,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  @GET
  @Path("wapi/v3/depositAddress.html")
  /**
   * Fetch deposit address.
   *
   * @param asset
   * @param recvWindow
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws NicehashException
   */
  DepositAddress depositAddress(
          @QueryParam("asset") String asset,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") long timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
      throws IOException, NicehashException;

  /**
   * Returns a listen key for websocket login.
   *
   * @param apiKey the api key
   * @return
   * @throws NicehashException
   * @throws IOException
   */
  @POST
  @Path("/api/v1/userDataStream")
  NicehashListenKey startUserDataStream(@HeaderParam(X_MBX_APIKEY) String apiKey)
      throws IOException, NicehashException;

  /**
   * Keeps the authenticated websocket session alive.
   *
   * @param apiKey the api key
   * @param listenKey the api secret
   * @return
   * @throws NicehashException
   * @throws IOException
   */
  @PUT
  @Path("/api/v1/userDataStream?listenKey={listenKey}")
  Map<?, ?> keepAliveUserDataStream(
          @HeaderParam(X_MBX_APIKEY) String apiKey, @PathParam("listenKey") String listenKey)
      throws IOException, NicehashException;

  /**
   * Closes the websocket authenticated connection.
   *
   * @param apiKey the api key
   * @param listenKey the api secret
   * @return
   * @throws NicehashException
   * @throws IOException
   */
  @DELETE
  @Path("/api/v1/userDataStream?listenKey={listenKey}")
  Map<?, ?> closeUserDataStream(
          @HeaderParam(X_MBX_APIKEY) String apiKey, @PathParam("listenKey") String listenKey)
      throws IOException, NicehashException;
}
